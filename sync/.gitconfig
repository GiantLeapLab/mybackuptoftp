#customize your
#   user.name
#   user.email
#   alias.mynikname
[user]
  name = Valerii Savchenko
  email = valerii.s@giantleaplab.com
[alias]
#####################
### Start ALIASES ###
#####################

###########
# User info
###########

  mynikname = "! f() {          \
    nikname='wellic'            \
    ;echo $nikname              \
  ;}; f"

  myname = "! echo $(git config user.name | tr -d '\n')"
  myallname = "! echo $(git mynikname)'\\|'$(git myname)"

  #Check labels in sources. Useful look for nikname, f.e. in comments 
  mycheck = "! f() {                  \
    allname=$(git mynik);             \
    echo Find nikname in sources $allname;                    \
    git grep -nEe \"${allname}\"      \
  ;}; f "

###############
# Main commands
###############

  br = branch
  co = checkout
  ci = commit
  amend = commit --amend -C HEAD
  st = status
  rb = rebase
  rbi = rebase -i
  ch = cherry-pick
  unstage = "! git reset HEAD -- $* "

  # diff
  df = diff
  df0 = diff -U0
  dfc = diff --cached
  visual = !gitk --all &

  # show history and log
  sshow = "! f() { git --no-pager show --no-notes --stat --pretty=format:\"%C(green)%h %C(yellow)%ad%C(cyan)%d%Creset | %s %C(black bold)[%an]%Creset\" --graph --date=short --decorate $* && echo  ; }; f "
  last  = "! f() { git --no-pager log  -20               --pretty=format:\"%C(green)%h %C(yellow)%ad%C(cyan)%d%Creset | %s %C(black bold)[%an]%Creset\" --graph --date=short --decorate $* && echo  ; }; f "
  hist  = "! f() { git --no-pager log                    --pretty=format:\"%C(green)%h %C(yellow)%ad%C(cyan)%d%Creset | %s %C(black bold)[%an]%Creset\" --graph --date=short --decorate $* && echo  ; }; f "
  hist2 = "! f() { git --no-pager log                    --pretty=format:\"%C(green)%h %C(yellow)%ad%Creset | %s %C(black bold)[%an]%Creset\"           --graph --date=short --decorate $* && echo  ; }; f "

  #Show log for current user without sorte
  mylog = "! f() { \
    allname=$(git myallname); \
    name=$(git myname); \
    nik=$(git mynikname); \
    echo Log of users: \"'$allname'\" \"'$name'\" \"'$nik'\"; \
    git hist2 $* --author=\"$allname\" --author=\"=$name\" --author=\"$nik\" \
  ;}; f "
#    git hist2 \"$@\" | grep -i -E \"${allname}\" | sed \"s/\\[${name}\\]//i\" | sed \"s/\\[${nik}\\]//i\" \

  #Show log for current user sorted by date
  mylogsort = "! f() { \
    git mylog $* | sort -k 3,3 -r \
  ;}; f"

#################
# Useful commands
#################

  cbr = rev-parse --abbrev-ref HEAD
  get-current-branch = "! git cbr"

  type = cat-file -t
  dump = cat-file -p

  # ignored
  # Show files ignored by git:
  ign = ls-files -o -i --exclude-standard
  # to see the list of the ignored files.
  ignored = !git ls-files -v | grep ^[a-z]

  # temporarily ignoring file
  ignore   = update-index --assume-unchanged
  unignore = update-index --no-assume-unchanged

  # check merged
  merged   = branch --merged
  unmerged = branch --no-merged

  # different list and logs
  ls = ls-files
  lg    = "! f() { git --no-pager log -p $* && echo  ; }; f "
  lol   = "! f() { git --no-pager log       --graph --decorate --pretty=oneline --abbrev-commit $*       && echo  ; }; f "
  lola  = "! f() { git --no-pager log --all --graph --decorate --pretty=oneline --abbrev-commit --all $* && echo  ; }; f "

  # for see gitignore: git gi list
  gi = "! gi() { curl -L -s https://www.gitignore.io/api/$@ ;}; gi"

###################
# Services commands
###################

fsckclear = "! f(){ \
    echo \"= git fsck\"                                             && git fsck \
    && echo \"= git reflog expire --expire-unreachable=now --all\"  && git reflog expire --expire-unreachable=now --all \
    && echo \"= git gc --prune prunefsck\"                          && git gc --prune=now \
    && echo \"= git fsck\"                                          && git fsck ;}; f"

# Сделать сделать быстро фейковый коммит, например, для тестов.
# Создается фейковый пустой файл.
# Конечная ветка: не меняется.
fakecommit ="! f(){ \
 mess=${1:-} \
 && showlog=${2:-} \
 && a=_fakefile_.$(basename $PWD).$(date +%Y%m%d_%H%M%S) \
 && [ -z \"$mess\" ] && mess=\"added $a\" || : \
 && touch \"$a\" && git add \"$a\" && git commit -m \"'Fake commit: $mess'\" \
 && git w-checklast $showlog \
 ; }; f"

# Сделать временный бекап текущей ветки в репу $dst (origin).
copy2tmp = "! f(){ \
 user=$(git mynikname) \
 && dst=${1:-origin} \
 && showlog=${2:-} \
 && cbr=$(git get-current-branch) \
 && rbranch=_${user}_${cbr}_tmp \
 && CURDATE=$(date +"%y%m%d_%H%M%S") \
 && MESS=$(echo -n \"Tmp commit of branch '${cbr}'. Date: ${CURDATE}.\") \
 && echo \"= copy2tmp $dst $showlog\" \
 && echo \"= copy2tmp 1-4:\ngit add --all\"                  && git add --all \
 && echo \"= copy2tmp 2-4:\ngit commit -am '$MESS'\"         && git commit -m \"${MESS}\" \
 && echo \"= copy2tmp 3-4:\ngit push -f $dst $cbr:$rbranch\" && git push -f $dst $cbr:$rbranch \
 && echo \"= copy2tmp 4-4:\ngit reset HEAD~1\"               && git reset HEAD~1 \
 && git w-checklast $showlog \
 ; }; f"


###################
# my worlflow 
###################

# Сделать копию $cfg в репу $dst (origin).
# Конечная ветка: не меняется.
backupcfg = "! git backupcfg-default"
backupcfg-default = "! f(){ \
 user=$(git mynikname) \
 && cfg=${1:-cfg} \
 && dst=${2:-origin} \
 && showlog=${3:-} \
 && rbranch=_${user}_${cfg}_backup \
 && echo \"= backupcfg $cfg $dst $showlog\" \
 && echo \"= backupcfg 1-1:\ngit push -f $dst $cfg:$rbranch\" && git push -f $dst $cfg:$rbranch \
 && git w-checklast $showlog \
 ; }; f"

# Посмотреть последние коммиты текущей ветки, если $showlog=show|on|''
# Конечная ветка: не меняется.
w-checklast = "! f(){ \
 showlog=${1:-show} \
 && [ -z \"$showlog\" -o \"$showlog\" = 'on' -o \"$showlog\" = 'show' ] && (echo '--- Please check ---'; git last) || : \
 ; }; f"

# Создать первичные ветки для работы 3-х веточной схемы (MCF).
# Конечная ветка: $fix.
w-create-base = "! git w-create-base-default"
w-create-base-default = "! f(){ \
 fix=${1:-fix} \
 && cfg=${2:-cfg} \
 && master=${3:-master} \
 && showlog=${4:-show} \
 && echo \"= w-create-base $fix $cfg $master $showlog\" \
 && echo \"= w-create-base 1-3:\ngit checkout $master\" && git checkout $master  \
 && echo \"= w-create-base 2-3:\ngit checkout -b $cfg\" && git checkout -b $cfg \
 && echo \"= w-create-base 3-3:\ngit checkout -b $fix\" && git checkout -b $fix \
 && git w-checklast $showlog \
 ; }; f"

# Поменять базовый коммит для $cfg и $fix, т.е. подготовить ветки к 3-х веточной схемы работы.
# Конечная ветка: $fix.
w-rebuild-base = "! git w-rebuild-base-default"
w-rebuild-base-default = "! f(){ \
 fix=${1:-fix} \
 && cfg=${2:-cfg} \
 && master=${3:-master} \
 && showlog=${4:-show} \
 && echo \"= w-rebuild-base $fix $cfg $master $showlog\" \
 && echo \"= w-rebuild-base 1-3:\ngit checkout $master\"    && git checkout $master  \
 && echo \"= w-rebuild-base 2-3:\ngit rebase $master $cfg\" && git rebase $master $cfg \
 && echo \"= w-rebuild-base 3-3:\ngit rebase $cfg $fix\"    && git rebase $cfg $fix \
 && git w-checklast $showlog \
 ; }; f"

# Этот метод можно переопределить в локальном конфиге, чтобы при обновлении (пше w-update) выполнить дополнительную комманду.
# Например, чтобы выполнить дополнительную синхронизацию.
# Конечная ветка: не меняется.
w-update-extcmd = "! git w-update-extcmd-default"
w-update-extcmd-default = "! f(){ \
 fix=${1:-fix} \
 && cfg=${2:-cfg} \
 && master=${3:-master} \
 && src1=${4:-origin} \
 && src1_rbranch=${5:-$master} \
 && src2=${6:-$src1} \
 && src2_lbranch=${7:-$master} \
 && src2_rbranch=${8:-$src2_lbranch} \
 && showlog=${9:-show} \
 && echo \"= w-update-extcmd $fix $cfg $master $src1 $src1_rbranch $src2 $src2_lbranch $src2_rbranch $showlog\" \
 && git w-checklast $showlog \
 ; }; f"

# Залить новые изменения в ветку $brach (master) из ветки $src_branch ($master) репы $src (origin).
# используя либо rebase (если $rebase=on|rebase|'') или merge.
# Конечная ветка: $branch.
w-load-fix-from-repo = "! git w-load-fix-from-repo-default"
w-load-fix-from-repo-default = "! f(){ \
 branch=${1:-master} \
 && src=${2:-origin} \
 && src_lbranch=${3:-$master} \
 && src_rbranch=${4:-$src_lbranch} \
 && rebase=${5:-rebase} \
 && showlog=${6:-show} \
 && echo \"= w-load-fix-from-repo $branch $src $src_lbranch $src_rbranch $rebase $showlog\" \
 && echo \"= w-load-fix-from-repo 1-4:\ngit checkout $src_lbranch \"  && git checkout $src_lbranch \
 && echo \"= w-load-fix-from-repo 2-4:\ngit pull $src $src_rbranch \" && git pull $src $src_rbranch \
 && echo \"= w-load-fix-from-repo 3-4:\ngit checkout $branch \"       && git checkout $branch \
 && if [ -z \"$rebase\" -o \"$rebase\" = 'on' -o \"$rebase\" = 'rebase' ] \
; then \
    echo \"= w-load-fix-from-repo 4-4:\ngit pull --rebase \" && git pull --rebase \
; else \
    echo \"= w-load-fix-from-repo 4-4:\ngit merge --no-edit $src_lbranch \" && git merge --no-edit -m \"Merged with $src/$src_rbranch\" $src_lbranch \
; fi \
 && git w-checklast $showlog \
 ; }; f"

# Обновить $master из удаленной ветки $src_branch ($master) репы $src (origin) с учетом $rebase (см. w-load-fix-from-repo).
# Применить изменения к $cfg и $fix. 
# Конечная ветка: $fix.
w-update-from-repo = "! git w-update-from-repo-default"
w-update-from-repo-default = "! f(){ \
 fix=${1:-fix} \
 && cfg=${2:-cfg} \
 && master=${3:-master} \
 && src=${4:-origin} \
 && src_lbranch=${5:-$master} \
 && src_rbranch=${6:-$src_lbranch} \
 && rebase=${7:-rebase} \
 && showlog=${8:-show} \
 && echo \"= w-update-from-repo $fix $cfg $master $src $src_lbranch $src_rbranch $rebase $showlog\" \
 && echo \"= w-update-from-repo 1-2:\" && git w-load-fix-from-repo $master $src $src_lbranch $src_rbranch $rebase off \
 && echo \"= w-update-from-repo 2-2:\" && git w-rebuild-base $fix $cfg $master off \
 && git w-checklast $showlog \
 ; }; f"

# Обновить $master из 2х источников
# $src1 (origin) - основное хранилище, $src1_branch ($master) - источник правок в $src1
# имя удаленной ветки $src1_rbranch из источника $src1 для $master
# $src2 ($src1) - дополнительный источник,  $src2_lbranch ($src1_branch), $src2_rbranch ( $src2_lbranch ) - источник правок в $src2
# $src2_lbranch - локальное имя удаленной ветки $src2_rbranch из источника $src2
# 1) Сначала обновить $master из удаленной ветки $src1_branch репы $src1 методом rebase.
# 2) Затем обновить $master из удаленной ветки $src2_branch репы $src2 методом merge, 
#    только если второй источник отличается от первого
# Конечная ветка: $fix.
w-update = "! git w-update-default"
w-update-default = "! f(){ \
 fix=${1:-fix} \
 && cfg=${2:-cfg} \
 && master=${3:-master} \
 && src1=${4:-origin} \
 && src1_rbranch=${5:-$master} \
 && src2=${6:-$src1} \
 && src2_lbranch=${7:-$master} \
 && src2_rbranch=${8:-$src2_lbranch} \
 && showlog=${9:-show} \
 && echo \"= w-update $fix $cfg $master $src1 $src1_rbranch $src2 $src2_lbranch $src2_rbranch $showlog\" \
 && echo \"= w-update 1-7:\ngit push $src1 $master:$src1_rbranch\" && git push $src1 $master:$src1_rbranch \
 && echo \"= w-update 2-7:\" && git w-update-from-repo $fix $cfg $master $src1 $master $src1_rbranch rebase off \
 && echo \"= w-update 3-7:\ngit push $src1 $master:$src1_rbranch\" && git push $src1 $master:$src1_rbranch \
 && if [ \"$src1\" = \"$src2\" -a \"$src1_branch\" = \"$src2_lbranch\" ] \
; then echo \"= w-update 4-7: there is not need update\" \
; else echo \"= w-update 4-7:\" && git w-update-from-repo $fix $cfg $master $src2 $src2_lbranch $src2_rbranch merge off \
 && echo \"= w-update 5-7:\ngit push $src1 $master:$src1_rbranch\" && git push $src1 $master:$src1_rbranch \
; fi \
 && echo \"= w-update 6-7:\"                    && git w-update-extcmd $fix $cfg $master $src1 $src1_rbranch $src2 $src2_lbranch $src2_rbranch off \
 && echo \"= w-update 7-7:\ngit checkout $fix\" && git checkout $fix \
 && git w-checklast $showlog \
 ; }; f"

# 1) Обновить $master из двух веток (параметры см. w-update), 
#    $src1 (origin) - основное хранилище $src2 ($src1) - дополнительный источник
# 2) Залить изменения из $fix в $master b  Отправить $master в ветку $src1_branch ($master) репы $src1 (origin). 
#    Сделать бекап $cfg.
# Конечная ветка: $fix.
w-upload = "! git w-upload-default"
w-upload-default = "! f(){ \
 fix=${1:-fix} \
 && cfg=${2:-cfg} \
 && master=${3:-master} \
 && src1=${4:-origin} \
 && src1_rbranch=${5:-$master} \
 && src2=${6:-$src1} \
 && src2_lbranch=${7:-$master} \
 && src2_rbranch=${8:-$src2_lbranch} \
 && showlog=${9:-show} \
 && echo \"= w-upload $fix $cfg $master $src1 $src1_rbranch $src2 $src2_lbranch $src2_rbranch $showlog\" \
 && echo \"= w-upload 1-2:\" && git w-update $fix $cfg $master $src1 $src1_rbranch $src2 $src2_lbranch $src2_rbranch off \
 && echo \"= w-upload 2-2:\" && git w-send-fix $fix $cfg $master $src1 $src1_rbranch off \
 && git w-checklast $showlog \
 ; }; f"


# Залить изменения из $fix в master. 
# Отправить $master в ветку $dst_branch ($master) репы $dst ($origin). 
# Сделать бекап $cfg.
# Конечная ветка: $fix.
w-send-fix = "! git w-send-fix-default"
w-send-fix-default = "! f(){ \
 fix=${1:-fix} \
 && cfg=${2:-cfg} \
 && master=${3:-master} \
 && dst=${4:-origin} \
 && dst_branch=${5:-$master} \
 && showlog=${6:-show} \
 && echo \"= w-send-fix $fix $cfg $master $dst $dst_branch $showlog\" \
 && echo \"= w-send-fix 1-3:\"                                    && git w-apply-fix $fix $cfg $master off \
 && echo \"= w-send-fix 2-3:\ngit push $dst $master:$dst_branch\" && git push $dst $master:$dst_branch \
 && echo \"= w-send-fix 3-3:\"                                    && git backupcfg $cfg $dst off \
 && git w-checklast $showlog \
 ; }; f"

# Загрузить свои изменения из ветки $fix в ветку $master, исключая коммиты ветки $cfg.
# Конечная ветка: $fix.
w-apply-fix = "! git w-apply-fix-default"
w-apply-fix-default = "! f(){ \
 fix=${1:-fix} \
 && cfg=${2:-cfg} \
 && master=${3:-master} \
 && showlog=${4:-show} \
 && echo \"= w-apply-fix $fix $cfg $master $showlog\" \
 && echo \"= w-apply-fix 1-4:\ngit checkout $fix\"                   && git checkout $fix \
 && echo \"= w-apply-fix 2-4:\ngit rebase --onto $master $cfg $fix\" && git rebase --onto $master $cfg $fix  \
 && echo \"= w-apply-fix 3-4:\ngit git rebase $fix $master\"         && git rebase $fix $master \
 && echo \"= w-apply-fix 4-4:\"                                      && git w-rebuild-base $fix $cfg $master off \
 && git w-checklast $showlog \
 ; }; f"

#######################################
# git-svn useful (old workflow)
# TODO: Refacroting usiong new workflow
#######################################

pushall      = ! echo "=  pushall"         && git push --all origin
pushallforce = ! echo "=  pushallforce"    && git push --all --force origin

svnlog = !git svn log --oneline -20 | sort
svndcommit   = ! echo "=  git svn dcommit" && git svn dcommit

uploadsvn = "! f(){ \
 fix=${1:-fix} && cfg=${2:-cfg} && master=${3:-master} \
 && echo "=  uploadsvn $fix $cfg $master " \
 && git pushallforce \
 && git updatesvn $fix $cfg $master \
 && git loadsvn $fix $cfg $master \
 && git svndcommit \
 && git updatesvn $fix $cfg $master  \
 && git pushallforce \
 && echo "=====" && git last \
 && echo "=====" && git svnlog ;}; f"

updatesvn = "! f(){ \
 fix=${1:-fix} && cfg=${2:-cfg} && master=${3:-master} \
 && echo "=  updatesvn ${fix} ${cfg} ${master} " \
 && echo "== git checkout $master"    && git checkout $master  \
 && echo "== git svn rebase"          && git svn rebase \
 && echo "== git rebase $master $cfg" && git rebase $master $cfg \
 && echo "== git rebase $cfg $fix"    && git rebase $cfg $fix ;}; f"

loadsvn = "! f(){ \
 fix=${1:-fix} && cfg=${2:-cfg} && master=${3:-master} \
 && echo "=  loadsvn $fix $cfg $master " \
 && echo "== git checkout $fix"                   && git checkout $fix \
 && echo "== git rebase --onto $master $cfg $fix" && git rebase --onto $master $cfg $fix  \
 && echo "== git checkout $master"                && git checkout $master \
 && echo "== git rebase $fix $master"             && git rebase $fix $master ;}; f"

###################
### End ALIASES ###
###################

[commit]
#	template = /home/wellic/.gitmessage_template
[color]
	ui = true
	status = true
	diff = true
	branch = true
	interactive = true
	pager = true
	grep = true
[color "log"]
    current = green    
    local = yellow
    remote = green reverse
[color "branch"]
    current = green bold   
    local = yellow
    remote = cyan 
[color "diff"]
    commit = yellow bold 
    meta = normal bold
    frag = magenta bold
    old = red
    new = green
    whitespace = red reverse blink
    plain = normal
    func = normal
[color "status"]
    added = green dim
    changed = cyan
    untracked = yellow
[core]
    whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol
    pager = less -FXRS
	editor = mcedit
	autocrlf = false
	safecrlf = false
	eol = native
#    FOR WIN
#    pager = more
#    git config --global core.autocrlf true
#    git config --global core.safecrlf true
[blame]
	data = short
[gui]
	spellingdictionary = en_GB
[merge]
	tool = kdiff3
    guitool = kdiff3
[diff]
	tool = kdiff3
	guitool = kdiff3
[difftool]
	prompt = false
[mergetool]
	prompt = true
[help]
    autocorrect = 0
[http]
	sslverify = false
[push]
    default = upstream